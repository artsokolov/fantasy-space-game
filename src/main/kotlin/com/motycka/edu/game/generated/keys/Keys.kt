@file:Suppress("warnings")
/*
 * This file is generated by jOOQ.
 */
package com.motycka.edu.game.generated.keys


import com.motycka.edu.game.generated.tables.Account
import com.motycka.edu.game.generated.tables.GameCharacter
import com.motycka.edu.game.generated.tables.GameMatch
import com.motycka.edu.game.generated.tables.Leaderboard
import com.motycka.edu.game.generated.tables.Round
import com.motycka.edu.game.generated.tables.records.AccountRecord
import com.motycka.edu.game.generated.tables.records.GameCharacterRecord
import com.motycka.edu.game.generated.tables.records.GameMatchRecord
import com.motycka.edu.game.generated.tables.records.LeaderboardRecord
import com.motycka.edu.game.generated.tables.records.RoundRecord

import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.QOM.ForeignKeyRule



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val ACCOUNT_PKEY: UniqueKey<AccountRecord> = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("account_pkey"), arrayOf(Account.ACCOUNT.ID), true)
val ACCOUNT_USERNAME_KEY: UniqueKey<AccountRecord> = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("account_username_key"), arrayOf(Account.ACCOUNT.USERNAME), true)
val GAME_CHARACTER_PKEY: UniqueKey<GameCharacterRecord> = Internal.createUniqueKey(GameCharacter.GAME_CHARACTER, DSL.name("game_character_pkey"), arrayOf(GameCharacter.GAME_CHARACTER.ID), true)
val GAME_MATCH_PKEY: UniqueKey<GameMatchRecord> = Internal.createUniqueKey(GameMatch.GAME_MATCH, DSL.name("game_match_pkey"), arrayOf(GameMatch.GAME_MATCH.ID), true)
val LEADERBOARD_PKEY: UniqueKey<LeaderboardRecord> = Internal.createUniqueKey(Leaderboard.LEADERBOARD, DSL.name("leaderboard_pkey"), arrayOf(Leaderboard.LEADERBOARD.CHARACTER_ID), true)
val ROUND_PKEY: UniqueKey<RoundRecord> = Internal.createUniqueKey(Round.ROUND, DSL.name("round_pkey"), arrayOf(Round.ROUND.ID), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val GAME_CHARACTER__FK_CHARACTER_ACCOUNT: ForeignKey<GameCharacterRecord, AccountRecord> = Internal.createForeignKey(GameCharacter.GAME_CHARACTER, DSL.name("fk_character_account"), arrayOf(GameCharacter.GAME_CHARACTER.ACCOUNT_ID), com.motycka.edu.game.generated.keys.ACCOUNT_PKEY, arrayOf(Account.ACCOUNT.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val GAME_MATCH__FK_MATCH_CHALLENGER: ForeignKey<GameMatchRecord, GameCharacterRecord> = Internal.createForeignKey(GameMatch.GAME_MATCH, DSL.name("fk_match_challenger"), arrayOf(GameMatch.GAME_MATCH.CHALLENGER_ID), com.motycka.edu.game.generated.keys.GAME_CHARACTER_PKEY, arrayOf(GameCharacter.GAME_CHARACTER.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val GAME_MATCH__FK_MATCH_OPPONENT: ForeignKey<GameMatchRecord, GameCharacterRecord> = Internal.createForeignKey(GameMatch.GAME_MATCH, DSL.name("fk_match_opponent"), arrayOf(GameMatch.GAME_MATCH.OPPONENT_ID), com.motycka.edu.game.generated.keys.GAME_CHARACTER_PKEY, arrayOf(GameCharacter.GAME_CHARACTER.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val LEADERBOARD__FK_LEADERBOARD_CHARACTER: ForeignKey<LeaderboardRecord, GameCharacterRecord> = Internal.createForeignKey(Leaderboard.LEADERBOARD, DSL.name("fk_leaderboard_character"), arrayOf(Leaderboard.LEADERBOARD.CHARACTER_ID), com.motycka.edu.game.generated.keys.GAME_CHARACTER_PKEY, arrayOf(GameCharacter.GAME_CHARACTER.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val ROUND__FK_ROUND_CHARACTER: ForeignKey<RoundRecord, GameCharacterRecord> = Internal.createForeignKey(Round.ROUND, DSL.name("fk_round_character"), arrayOf(Round.ROUND.CHARACTER_ID), com.motycka.edu.game.generated.keys.GAME_CHARACTER_PKEY, arrayOf(GameCharacter.GAME_CHARACTER.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val ROUND__FK_ROUND_MATCH: ForeignKey<RoundRecord, GameMatchRecord> = Internal.createForeignKey(Round.ROUND, DSL.name("fk_round_match"), arrayOf(Round.ROUND.MATCH_ID), com.motycka.edu.game.generated.keys.GAME_MATCH_PKEY, arrayOf(GameMatch.GAME_MATCH.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
