/*
 * This file is generated by jOOQ.
 */
package com.motycka.edu.game.generated.tables


import com.motycka.edu.game.generated.Public
import com.motycka.edu.game.generated.keys.ROUND_PKEY
import com.motycka.edu.game.generated.keys.ROUND__FK_ROUND_CHARACTER
import com.motycka.edu.game.generated.keys.ROUND__FK_ROUND_MATCH
import com.motycka.edu.game.generated.tables.GameCharacter.GameCharacterPath
import com.motycka.edu.game.generated.tables.GameMatch.GameMatchPath
import com.motycka.edu.game.generated.tables.records.RoundRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class Round(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, RoundRecord>?,
    parentPath: InverseForeignKey<out Record, RoundRecord>?,
    aliased: Table<RoundRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<RoundRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.round</code>
         */
        val ROUND: Round = Round()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<RoundRecord> = RoundRecord::class.java

    /**
     * The column <code>public.round.id</code>.
     */
    val ID: TableField<RoundRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.round.match_id</code>.
     */
    val MATCH_ID: TableField<RoundRecord, Long?> = createField(DSL.name("match_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.round.round_number</code>.
     */
    val ROUND_NUMBER: TableField<RoundRecord, Int?> = createField(DSL.name("round_number"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.round.character_id</code>.
     */
    val CHARACTER_ID: TableField<RoundRecord, Long?> = createField(DSL.name("character_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.round.health_delta</code>.
     */
    val HEALTH_DELTA: TableField<RoundRecord, Int?> = createField(DSL.name("health_delta"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.round.stamina_delta</code>.
     */
    val STAMINA_DELTA: TableField<RoundRecord, Int?> = createField(DSL.name("stamina_delta"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.round.mana_delta</code>.
     */
    val MANA_DELTA: TableField<RoundRecord, Int?> = createField(DSL.name("mana_delta"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<RoundRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<RoundRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<RoundRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.round</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.round</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.round</code> table reference
     */
    constructor(): this(DSL.name("round"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, RoundRecord>?, parentPath: InverseForeignKey<out Record, RoundRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, ROUND, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class RoundPath : Round, Path<RoundRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, RoundRecord>?, parentPath: InverseForeignKey<out Record, RoundRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<RoundRecord>): super(alias, aliased)
        override fun `as`(alias: String): RoundPath = RoundPath(DSL.name(alias), this)
        override fun `as`(alias: Name): RoundPath = RoundPath(alias, this)
        override fun `as`(alias: Table<*>): RoundPath = RoundPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<RoundRecord, Long?> = super.getIdentity() as Identity<RoundRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<RoundRecord> = ROUND_PKEY
    override fun getReferences(): List<ForeignKey<RoundRecord, *>> = listOf(ROUND__FK_ROUND_CHARACTER, ROUND__FK_ROUND_MATCH)

    /**
     * Get the implicit join path to the <code>public.game_character</code>
     * table.
     */
    fun gameCharacter(): GameCharacterPath = gameCharacter
    val gameCharacter: GameCharacterPath by lazy { GameCharacterPath(this, ROUND__FK_ROUND_CHARACTER, null) }

    /**
     * Get the implicit join path to the <code>public.game_match</code> table.
     */
    fun gameMatch(): GameMatchPath = gameMatch
    val gameMatch: GameMatchPath by lazy { GameMatchPath(this, ROUND__FK_ROUND_MATCH, null) }
    override fun `as`(alias: String): Round = Round(DSL.name(alias), this)
    override fun `as`(alias: Name): Round = Round(alias, this)
    override fun `as`(alias: Table<*>): Round = Round(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Round = Round(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Round = Round(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Round = Round(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Round = Round(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Round = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Round = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Round = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Round = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Round = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Round = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Round = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Round = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Round = where(DSL.notExists(select))
}
